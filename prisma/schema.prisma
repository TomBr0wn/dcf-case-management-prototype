generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data/database.sqlite"
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  firstName String
  lastName  String
  role     String
  cases    Case[]
  activityLogs ActivityLog[]
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  action    String
  model     String
  recordId  Int?
  title     String
  meta      Json?
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  caseId    Int?
  case      Case?    @relation(fields: [caseId], references: [id])
  createdAt DateTime @default(now())
}

model Victim {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  cases     Case[]  @relation("CaseVictims")
}

model Witness {
  id                          Int                @id @default(autoincrement())
  title                       String?
  firstName                   String
  lastName                    String
  dateOfBirth                 DateTime?
  gender                      Gender?
  ethnicity                   Ethnicity?
  preferredLanguage           PreferredLanguage  @default(English)
  isCpsContactAllowed         Boolean            @default(true)
  addressLine1                String?
  addressLine2                String?
  addressTown                 String?
  addressPostcode             String?
  mobileNumber                String?
  emailAddress                String?
  isVictim                    Boolean            @default(false)
  isKeyWitness                Boolean            @default(false)
  isChild                     Boolean            @default(false)
  isExpert                    Boolean            @default(false)
  isInterpreter               Boolean            @default(false)
  isPolice                    Boolean            @default(false)
  isProfessional              Boolean            @default(false)
  isPrisoner                  Boolean            @default(false)
  isVulnerable                Boolean            @default(false)
  isIntimidated               Boolean            @default(false)
  isAppearingInCourt          Boolean?
  reasonForNotAppearingInCourt String?
  isRelevant                  Boolean?
  attendanceIssues            String?
  previousTransgressions      String?
  wasWarned                   Boolean?
  dcf                         Boolean
  courtAvailabilityStartDate  DateTime?
  courtAvailabilityEndDate    DateTime?
  courtSpecialMeasures        String?
  courtNeeds                  String?
  requiresMeeting             Boolean?
  caseId                      Int
  case                        Case               @relation(fields: [caseId], references: [id])
  statements                  WitnessStatement[]
}

model WitnessStatement {
  id                    Int      @id @default(autoincrement())
  witnessId             Int
  witness               Witness  @relation(fields: [witnessId], references: [id])
  number                Int
  isMarkedAsSection9    Boolean?
  isUsedAsEvidence      Boolean?
  receivedDate          DateTime
  @@unique([witnessId, number]) // enforce uniqueness per witness
}

model Case {
  id          Int         @id @default(autoincrement())
  reference   String      @unique
  isCTL       Boolean
  complexity  String?
  type        String?
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  unitId      Int
  unit        Unit        @relation(fields: [unitId], references: [id])
  defendants  Defendant[] @relation("CaseDefendants")
  victims     Victim[]    @relation("CaseVictims")
  lawyers     Lawyer[]    @relation("CaseLawyers")
  witnesses   Witness[]
  hearing     Hearing?
  location    Location?
  tasks       Task[]
  documents   Document[]
  dga         DGA?
  activityLogs ActivityLog[]
}

model DGA {
  id       Int          @id @default(autoincrement())
  caseId   Int          @unique
  case     Case?         @relation(fields: [caseId], references: [id])
  outcome  DGAOutcome?
  reason   String?
}

enum DGAOutcome {
  NOT_DISPUTED
  DISPUTED_SUCCESSFULLY
  DISPUTED_UNSUCCESSFULLY
}

enum Gender {
  Male
  Female
  Unknown
}

enum PreferredLanguage {
  English
  Welsh
}

enum Ethnicity {
  White
  Asian_or_Asian_British
  Black_or_Black_British
  Mixed
  Other
  Prefer_not_to_say
}

model Lawyer {
  id                  Int    @id @default(autoincrement())
  firstName           String
  lastName            String
  cases               Case[]  @relation("CaseLawyers")
  unit                Unit   @relation(fields: [unitId], references: [id])
  unitId              Int
  specialistAreas   Specialism[] @relation("LawyerSpecialistAreas")
  preferredAreas    Specialism[] @relation("LawyerPreferredAreas")
  restrictedAreas   Specialism[] @relation("LawyerRestrictedAreas")
}

model Specialism {
  id                  Int      @id @default(autoincrement())
  name                String   @unique
  lawyersSpecialist    Lawyer[] @relation("LawyerSpecialistAreas")
  lawyersPreferred     Lawyer[] @relation("LawyerPreferredAreas")
  lawyersRestricted    Lawyer[] @relation("LawyerRestrictedAreas")
}

model Unit {
  id      Int      @id @default(autoincrement())
  name    String
  lawyers Lawyer[]
  cases   Case[]
}

model Defendant {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  cases     Case[]  @relation("CaseDefendants")
}

model Hearing {
  id      Int      @id @default(autoincrement())
  date    DateTime
  case    Case?    @relation(fields: [caseId], references: [id])
  caseId  Int?     @unique
}

model Location {
  id       Int     @id @default(autoincrement())
  name     String
  line1    String
  line2    String
  town     String
  postcode String
  case     Case?   @relation(fields: [caseId], references: [id])
  caseId   Int?    @unique
}

model Task {
  id       Int      @id @default(autoincrement())
  name     String
  type     String
  dueDate  DateTime
  case     Case     @relation(fields: [caseId], references: [id])
  caseId   Int
}

model Document {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  type         String
  size         Int
  case         Case     @relation(fields: [caseId], references: [id])
  caseId       Int
}